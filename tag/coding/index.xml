<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coding | Manuel Pagliuca</title><link>https://manuelpagliuca.github.io/tag/coding/</link><atom:link href="https://manuelpagliuca.github.io/tag/coding/index.xml" rel="self" type="application/rss+xml"/><description>Coding</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 03 Feb 2024 10:02:31 +0100</lastBuildDate><image><url>https://manuelpagliuca.github.io/media/icon_hu4a5b1b591c5ae08b60d2e1d27385e465_426_512x512_fill_lanczos_center_3.png</url><title>Coding</title><link>https://manuelpagliuca.github.io/tag/coding/</link></image><item><title>Binary Search</title><link>https://manuelpagliuca.github.io/post/binary-search/</link><pubDate>Sat, 03 Feb 2024 10:02:31 +0100</pubDate><guid>https://manuelpagliuca.github.io/post/binary-search/</guid><description>&lt;p>The &lt;a href="https://en.wikipedia.org/wiki/Binary_search_algorithm" target="_blank" rel="noopener">binary search&lt;/a> it&amp;rsquo;s a &lt;strong>search algorithm&lt;/strong> which find the index of a particular value which is stored in a &lt;strong>sorted&lt;/strong> array.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Random_access" target="_blank" rel="noopener">Random access&lt;/a> is a requirement for performing this search.&lt;/li>
&lt;/ul>
&lt;h2 id="main-algorithm">Main algorithm&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">binarySearch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">target&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">target&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">end&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">target&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">mid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">target&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="first-loop">First loop&lt;/h3>
&lt;ul>
&lt;li>&lt;code>nums = [1, 3, 4, 5, 6, 8, 9, 10, 11, 12]&lt;/code>&lt;/li>
&lt;li>&lt;code>target = 5&lt;/code>&lt;/li>
&lt;li>&lt;code>start = 0&lt;/code> and &lt;code>end = 9&lt;/code>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>The mid index get computed as &lt;code>mid = 0 + 9 / 2 = 4&lt;/code>, this is a bad case, because the &lt;code>target&lt;/code> is one position away from the &lt;code>mid&lt;/code>.&lt;/li>
&lt;li>Test &lt;code>target&lt;/code> against mid value:
&lt;ol>
&lt;li>Is &lt;code>target&lt;/code> equal to mid value? No (&lt;code>5 != 6&lt;/code>)&lt;/li>
&lt;li>Is &lt;code>target&lt;/code> smaller than mid value? Yes (&lt;code>5 &amp;lt; 6&lt;/code>), let&amp;rsquo;s continue the search on the left side of the mid element (&lt;code>end = mid - 1&lt;/code>).&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./bs-00.drawio.png" alt="bs-0" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./bs-01.drawio.png" alt="bs-0" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="second-loop">Second loop&lt;/h3>
&lt;ol>
&lt;li>The mid index get computed as &lt;code>mid = 0 + 3 / 2 = 1&lt;/code>&lt;/li>
&lt;li>Test &lt;code>target&lt;/code> against mid value:
&lt;ol>
&lt;li>Is &lt;code>target&lt;/code> equal to mid value? No (&lt;code>5 != 3&lt;/code>)&lt;/li>
&lt;li>Is &lt;code>target&lt;/code> smaller than mid value? No (&lt;code>5 &amp;gt; 3&lt;/code>)&lt;/li>
&lt;li>Is &lt;code>target&lt;/code> bigger than mid value? Yes, let&amp;rsquo;s continue the search on the right side of the mid element (&lt;code>start = mid + 1&lt;/code>).&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./bs-02.drawio.png" alt="bs-0" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./bs-03.drawio.png" alt="bs-0" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="third-loop">Third loop&lt;/h3>
&lt;ol>
&lt;li>The mid index get computed as &lt;code>mid = 2 + 3 / 2 = 2&lt;/code>&lt;/li>
&lt;li>Test &lt;code>target&lt;/code> against mid value:
&lt;ol>
&lt;li>Is &lt;code>target&lt;/code> equal to mid value? No (&lt;code>5 != 4&lt;/code>)&lt;/li>
&lt;li>Is &lt;code>target&lt;/code> smaller than mid value? No (&lt;code>5 &amp;gt; 4&lt;/code>)&lt;/li>
&lt;li>Is &lt;code>target&lt;/code> bigger than mid value? Yes, let&amp;rsquo;s continue the search on the right side of the mid element (&lt;code>start = mid + 1&lt;/code>).&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./bs-04.drawio.png" alt="bs-0" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./bs-05.drawio.png" alt="bs-0" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="fourth-loop">Fourth loop&lt;/h3>
&lt;ol>
&lt;li>The mid index get computed as &lt;code>mid = 3 + 3 / 2 = 3&lt;/code>&lt;/li>
&lt;li>Test &lt;code>target&lt;/code> against mid value:
&lt;ol>
&lt;li>Is &lt;code>target&lt;/code> equal to mid value? Yes (&lt;code>5 == 5&lt;/code>), the &lt;code>mid&lt;/code> index is returned.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./bs-06.drawio.png" alt="bs-0" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p></description></item></channel></rss>